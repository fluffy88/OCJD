Create *.io package
	- Keeps the main Data.java class clean.
	- Puts all the complex reading and writing to the DB into one place.

Read full DB into memory
	- Improves read performance drastically.
	- Makes future code changes simpler as data look ups are done on a Java collection.

DB records as String[]
	- Could use a model
	- String[] makes the DBParser.java more generic and transportable.
	- If DB scheme ever changes, no need to change how the DB is read, only UI and server updates.

Made Data.java a Singleton
	- Data.java is the class exposed by the server to give clients access to the database info.
	  The server should only have one instance of this class as all clients should go through
	  this singleton to read or write to the Database to maintain database integrity.

RMI
	- RMI adds some initial 'setup' complexity, but after setup reduces code complexity.
	- Using RMI keeps remote server calls clean, easy to understand(junior programmers) and easier to maintain.

Main.java
	- Reads command line flag and passes off to specific application.
	- Keeps main start class clean with single purpose.
	- Makes it very simple to have Non-networked & Networked modes.
	
ClientUI.java
	- Single class with sole responsibility to create a new JFrame for the client application.
	- Makes Application extensible, as new pages can be created & added easily.
	
UI Components, JPanels
	- Extend JPanel for each Client area.
	- This keeps each UI components separate, easily maintained, easily replaced.

Injection.java
	- A very basic Dependency Injection framework.
	- Allows clean and simple access to objects that need to be accessed from multiple classes.
	- Removes complicated passing of objects that's hard to follow.

Data#find()
	- Made search case insensitive.
	- Makes use of application simpler & faster with less learning curve.
	
Data#read()
	- Does not return actual result, returns a copy.
	- This stops the Standalone application UI from modifying the cache indirectly.
	- All read/modifications of the cache are to be handled through Data.java and will be synchronized. 
	
DBSchema.java
	- Created a Class to store Database information.
	- Stores schema info, but also contains dynamic information, i.e. Total number of records, full byte length of a record.
	  This makes it easy to read/write to database, as we have the full structure info at hand.  